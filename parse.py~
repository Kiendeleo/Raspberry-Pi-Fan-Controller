#!/usr/bin/env python

###########################################################################
##
## This class controls fans. It can use a config file, or use default
## values. It expects a temperature sensor. It expects two fans, and uses a
## low value and a high value for deciding if it should toggle the fans or
## not. 
##
## This program uses GPIO 11 and 13 for the fans, and 4 for the temp sensor.
##
## Any variable in the variable list can be changed through the config file.
##
## Note: This assumes active low.
##
###########################################################################
class FanController:

    import time #if only it was this easy in real life...
    
    import RPi.GPIO as GPIO #the class for the pi

    def __init__(self):
        self.GPIO.setmode(self.GPIO.BOARD) #set up the board

        #try to open the config file
        configFile = None
        try:
            configFile = open("config.cfg")
        except:
            print("Error: Config file config.cfg not found.\n")
            exit(1)

        #this is a dictionary of values
        self.variables = {
            "tempSensor":4,
            "fan1":17,
            "fan2":27,
            "lowTemp":75,
            "highTemp":85,
            "checkDelay":1, #seconds
            "reverseLogic":0
        }

        print("opening config file...")
        #go through the config file, reading values
        for line in configFile:
            myLine = line.strip() #strip the whitespace off the line
        
            #make sure there's a line and it's not a comment
            if (len(myLine) > 0 and myLine[0] != "#"):
                #if there are any inline comments, take them off
                myLine = myLine.split(";")[0].strip()
                #split the string over the '='
                pair = myLine.split("=") 
                #print(pair)
                #make sure there are two values (there was an =); otherwise,
                #ignore the line
                if (len(pair) == 2):
                    #set the var name and the value, stripping the semicolon
                    varName, value = pair[0], pair[1]
                    #print(varName, value)
                    #if the variable exists, set it
                    if varName in self.variables:
                        self.variables[varName] = int(value)
        print("closing config file...")
        configFile.close()
        self.initFans()

        self.fansOn = False;

        #do some output to make sure that the values were picked up
        for i in self.variables:
            print(i, self.variables[i])
    

    #this gets the value of the sensor
    def getTemp(self):
        return 4 #obtained through a fair dice roll; guaranteed to be random

    #this returns true or false, based on if the fans are on or off
    def checkFans():
        return self.fansOn
    
    #This turns the fans off.
    def turnFansOn(self):
        if (self.variables["reverseLogic"] == 0):
            self.GPIO.output(self.variables["fan1"], self.GPIO.HIGH)
            self.GPIO.output(self.variables["fan2"], self.GPIO.HIGH)
            self.fansOn = True
        if (self.variables["reverseLogic"] == 1):
            self.GPIO.output(self.variables["fan1"], self.GPIO.LOW)
            self.GPIO.output(self.variables["fan2"], self.GPIO.LOW)
            self.fansOn = True


    #This turns the fans on.
    def turnFansOff(self):
        if (self.variables["reverseLogic"] == 0):
            self.GPIO.output(self.variables["fan1"], self.GPIO.LOW)
            self.GPIO.output(self.variables["fan2"], self.GPIO.LOW)
            self.fansOn = False
        if (self.variables["reverseLogic"] == 1):
            self.GPIO.output(self.variables["fan1"], self.GPIO.HIGH)
            self.GPIO.output(self.variables["fan2"], self.GPIO.HIGH)
            self.fansOn = False
        
    def initFans(self):
        try:
            self.GPIO.setup(self.variables["fan1"], self.GPIO.OUT)
        except:
            print("Fan on pin %d failed to initialize." %self.variables["fan1"])
            exit(1)
        try:
            self.GPIO.setup(self.variables["fan2"], self.GPIO.OUT)
        except:
            print("Fan on pin %d failed to initialize." %self.variables["fan2"])
            exit(1)
        self.turnFansOff()
        # if (self.variables["reverseLogic"] == 0):
        #     self.GPIO.setup(self.variables["fan1"], self.GPIO.OUT, inital=self.GPIO.HIGH)
        #     self.GPIO.setup(self.variables["fan2"], self.GPIO.OUT, inital=self.GPIO.HIGH)
        # if (self.variables["reverseLogic"] == 1):
        #     self.GPIO.setup(self.variables["fan1"], self.GPIO.OUT, inital=self.GPIO.LOW)
        #     self.GPIO.setup(self.variables["fan2"], self.GPIO.OUT, inital=self.GPIO.LOW)

    
    #This starts the monitoring
    def start(self):
        while(1):
            try:
                #This checks to see if the temperature is outside the allowed
                #range. If it is, it toggles the fans accordingly.
                currentTemp = self.getTemp()
                if (currentTemp >= self.variables["highTemp"]):
                    print("Temperature high; turning fans on.")
                    self.turnFansOn()
                elif (currentTemp <= self.variables["lowTemp"]):
                    print("Temperature low; turning fans off.")
                    self.turnFansOff()
                else:
                    print("Temperature within range.")
                
                self.time.sleep(1)
            except KeyboardInterrupt:
                print("\n\nProgram Exiting...")
                GPIO.cleanup()
                print("Goodbye!\n")

#The main function of this program. Mainly used for testing.
def main():
    f = FanController()
    f.start()



#This starts the program
if __name__ == "__main__":
    main()
